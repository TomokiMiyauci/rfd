name: release

on:
  push:
    branches:
      - beta
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true

          # - host: ubuntu-latest
          #   target: aarch64-linux-android
          #   build: yarn build --target aarch64-linux-android
    name: stable - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.os }}

      - name: Install cached cross
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cross

      # - uses: goto-bus-stop/setup-zig@v2
      #   if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
      #   with:
      #     version: 0.13.0
      # - name: Setup toolchain
      #   run: ${{ matrix.settings.setup }}
      #   if: ${{ matrix.settings.setup }}
      #   shell: bash
      # - name: Setup node x86
      #   if: matrix.settings.target == 'i686-pc-windows-msvc'
      #   run: yarn config set supportedArchitectures.cpu "ia32"
      #   shell: bash
      # - name: Install dependencies
      #   run: yarn install
      # - name: Setup node x86
      #   uses: actions/setup-node@v4
      #   if: matrix.settings.target == 'i686-pc-windows-msvc'
      #   with:
      #     node-version: 20
      #     cache: yarn
      #     architecture: x86

      - name: Build
        run: ${{ matrix.targets.cross && 'cross' || 'cargo' }} build -p rfd-node --release --target ${{ matrix.targets.target }} --locked

      - name: Rename artifacts
        shell: bash
        run: |
          find target/${{ matrix.targets.target }}/release -maxdepth 1 \( -name '*.so' -o -name '*.dll' -o -name '*.dylib' \) -exec sh -c '
          for file; do
            if [ -e "$file" ]; then
              mv "$file" "rfd-${{ matrix.targets.target }}.node";
            fi
          done' sh {} +

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rfd-${{ matrix.settings.target }}-node
          path: target
          if-no-files-found: error

  # test-macOS-windows-binding:
  #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       settings:
  #         - host: macos-latest
  #           target: x86_64-apple-darwin
  #         - host: windows-latest
  #           target: x86_64-pc-windows-msvc
  #       node:
  #         - '18'
  #         - '20'
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: yarn
  #         architecture: x64
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: yarn test
  # test-linux-x64-gnu-binding:
  #   name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - '18'
  #         - '20'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: yarn
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-x86_64-unknown-linux-gnu
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  # test-linux-aarch64-gnu-binding:
  #   name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - '18'
  #         - '20'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-aarch64-unknown-linux-gnu
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Install dependencies
  #       run: |
  #         yarn config set supportedArchitectures.cpu "arm64"
  #         yarn config set supportedArchitectures.libc "glibc"
  #         yarn install
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: arm64
  #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #     - name: Setup and run tests
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: node:${{ matrix.node }}-slim
  #         options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
  #         run: |
  #           set -e
  #           yarn test
  #           ls -la

  release:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      new_release: ${{ steps.semantic.outputs.new_release_published }}
      new_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
      new_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: cycjimmy/semantic-release-action@v4
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          path: artifact

      - name: debug
        run: ls -R

  upload:
    needs: [release]
    if: ${{ needs.release.outputs.new_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifact

      - name: Upload releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.new_tag }}
          files: |
            artifact/**/release/*.node
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  publish:
    needs: [release]
    if: ${{ needs.release.outputs.new_release == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Modify jsr config
        uses: maxgfr/github-change-json@main
        with:
          key: version
          value: ${{ needs.release.outputs.new_version }}
          path: ./deno.json

      - name: publish
        # --allow-dirty is required because the uncommit file exists because the jsr config was changed in the previous job.
        run: deno publish --allow-dirty
